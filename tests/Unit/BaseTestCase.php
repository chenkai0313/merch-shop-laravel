<?php
/**
 * Created by PhpStorm.
 * User: fuyuehua
 * Date: 2017/9/13
 * Time: 10:41
 */
namespace Tests\Unit;

use Tests\TestCase;

class BaseTestCase extends TestCase
{
    #当前使用用户
    public static $currentUser = '';
    #是否已数据库初始化
    protected static $unitInit = false;
    #所有header请求头
    protected static $headers = [];
    #当前header信息
    public $currentHeader = [];
    #是否加载用户登录token
    public $hasAuthToken = true;
    #用户登录token是否动态刷新
    public $AuthTokenDynamicRefresh = false;
    #是否使用完整url
    public $complete_url = false;
    #默认header请求头
    protected $default_header = [];
    #默认请求参数
    public $params = [];
    #所有登录信息
    // public $login_params = [];

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        #使用静态变量保证只执行一次
        if (!static::$unitInit) {
            #数据库清空
            $this->artisan('migrate:reset');
            #数据库迁移
            $this->artisan('migrate');
            #数据填充
            /*$this->dataInit();
            $this->artisan('db:seed');*/
            $this->seed('TestingDatabaseSeeder');
            #token不动态刷新
            /*if ($this->hasAuthToken && !$this->AuthTokenDynamicRefresh) {
                #所有用户登陆token初始化
                $this->userAuthTokenInit();
                #应用刷新使token生效
                $this->refreshApplication();
            }*/
            static::$unitInit = true;
        }
    }

    /**
     * 初始化
     */
    public function init()
    {
        #token动态刷新
        /*if ($this->hasAuthToken && $this->AuthTokenDynamicRefresh) {
            #用户登陆token初始化
            $this->userAuthTokenInit();
            #应用刷新使token生效
            $this->refreshApplication();
        }*/
        #默认当前用户
        // $this->currentHeader = static::$headers[static::$currentUser];
        #请求参数初始化
        $this->params = $this->readyApiParams();
    }

    /**
     * uri初始化
     * @param $url
     * @param array $params
     * @return string
     */
    public function initUrl($url, $params = []) {
        if (!empty($params)) {
            $params = http_build_query($params);
            $url = $url . '?' . $params;
        }
        if ($this->complete_url) {
            $url = 'http://' . config('api.domain') . $url;
        }
        return $url;
    }

    /**
     * 数据库数据初始化
     */
    public function dataInit()
    {
        $sql = file_get_contents(config('system.test_sql_path'));
        $a = explode(';', $sql);
        foreach ($a as $v) {
            if (!empty($v)) {
                $v = $v . ';';
                \DB::insert($v);
            }
        }
    }

    /**
     * 添加额外的用户登录信息
     * @param $user_params
     */
    /*public function userParamsAdd($user_params) {
        $this->login_params = array_merge($this->login_params, $user_params);
    }*/

    /**
     * 获取用户登录信息
     * @return mixed
     */
    /*public function userLogin()
    {
        if (!empty($this->login_params)) {
            $user_info = [];
            foreach ($this->login_params as $user => $params) {
                $response = $this->postJson($this->initUrl($params['uri']), $params['params'], $this->default_header)->getOriginalContent();
                $user_info[$user] = $response;
                if (empty($this->currentUser)) {
                    static::$currentUser = $user;
                }
            }
            return $user_info;
        }
        return [];
    }*/

    /**
     * 设置测试参数
     * @return array
     */
    public function readyApiParams()
    {
        return [];
    }

    /**
     * 登陆token初始化
     */
    /*public function userAuthTokenInit()
    {
        $user_infos = $this->userLogin();
        if (!empty($user_infos)) {
            foreach ($user_infos as $user_name => $user_info) {
                $headers['Authorization'] = 'Bearer ' . $user_info['data']['token'];
                $headers = array_merge($headers, $this->default_header);
                static::$headers[$user_name] = $this->initHeaders($headers);
            }
        }
    }*/

    /**
     * 设置header
     * @param array $addition
     * @return array
     */
    public function initHeaders($addition = [])
    {
        return array_merge($this->currentHeader, $addition);
    }

    /**
     * 简洁get请求
     * @param $url
     * @param array $params
     * @param array $header
     * @return mixed
     */
    public function getApiTest($url, $params = [], $header = [])
    {
        return $this->getJson($this->initUrl($url, $params), $header);
    }

    /**
     * 简洁post请求
     * @param $url
     * @param array $params
     * @param array $headers
     * @return mixed
     */
    public function postApiTest($url, $params = [], $headers = [])
    {
        return $this->postJson($this->initUrl($url), $params, $headers);
    }

    /**
     * 简洁请求
     * @param $params
     * @return mixed
     */
    public function apiTest($params)
    {
        $headers = empty($params['header']) ? $this->currentHeader : $params['header'];
        $method = empty($params['method']) ? 'get' : $params['method'];
        // $headers = empty($params['user']) ? $headers : static::$headers[$params['user']];
        if (strtolower($method) == 'get') {
            return $this->getApiTest($params['uri'], $params['params'], $headers)->assertJson(['code' => 1]);
        } else if (strtolower($method) == 'post') {
            return $this->postApiTest($params['uri'], $params['params'], $headers)->assertJson(['code' => 1]);
        } else {
            return $this->json($method, $this->initUrl($params['uri']), $params['params'], $headers)
                ->assertJson(['code' => 1]);
        }
    }
}